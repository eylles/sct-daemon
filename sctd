#!/bin/sh

# Copyright (c) 2017 Aaron Bieber <aaron@bolddaemon.com>
# Copryright (c) 2017 Inokentiy Babushkin <twk@twki.de>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

#config file
CONFIG="${XDG_CONFIG_HOME:-~/.config}/sctd/sctdrc"

loadConfig () {
    # defaults, in case config doesn't contain them
    # default value of max temp is same as the default screen color temp of x11
    TEMP_MIN=4500
    TEMP_MAX=6500
    INTERVAL=60

    # load config if it exists
    [ -f "$CONFIG" ] && . "$CONFIG"

    # calculate increment
    INCREMENT=$(( (TEMP_MAX - TEMP_MIN) / 720 ))
    # 12 hours is 720 minutes

    # we cycle 10 times per second, so the interval has to be scaled
    INTERVAL=$(( INTERVAL * 10 ))
    [ "$DBGOUT" = 1 ] && echo "loaded config: $CONFIG"
}

# use the right sct executable
SCT=$(command -v sct)
[ -z "$SCT" ] && SCT=$(command -v xsct)
[ -z "$SCT" ] && SCT=$(command -v waysct)

if [ ! -e "$SCT" ]; then
    echo "Please install sct!"
    exit 1;
fi

# set HM var to current time of the day in minutes
setHM () {
    H=$(date +"%H" | sed -e 's/^0//')
    M=$(date +"%M" | sed -e 's/^0//')
    HM=$((H*60 + M))
}

# calculate temperature according to current time
setTEMP() {
    # if time is above mid day 12:00
    if [ $HM -gt 720 ]; then
        TEMP=$(( TEMP_MIN + INCREMENT * (1440 - HM) ))
    else
        TEMP=$(( TEMP_MIN + INCREMENT * HM ))
    fi
}

# set color temperature
tick() {
    # run setHM for current time
    setHM
    # check the state of the toggle
    # 1 will use the max temperature
    # 0 will us the  dynamically calculated value
    [ "$TOGGLE_STATE" = 1 ] && SET_TEMP=max
    [ "$TOGGLE_STATE" = 0 ] && SET_TEMP=dyn
    [ "$DBGOUT" = 1 ] && echo "$SET_TEMP"
    # temp min is an option here but currently unused
    case "$SET_TEMP" in
        max) TEMP="$TEMP_MAX" ;;
        dyn) setTEMP ;;
        min) TEMP="$TEMP_MIN" ;;
    esac
    
    [ "$DBGOUT" = 1 ] && echo "time is: $HM"
    [ "$DBGOUT" = 1 ] && echo "temperature is: $TEMP"
    $SCT $TEMP
}

hupHandler () {
    loadConfig
    tick
}

# get signal HUP
trap hupHandler HUP

TOGGLE_STATE=0

toggleSwitch () {
    case "$TOGGLE_STATE" in
        0) TOGGLE_STATE=1 ;;
        1) TOGGLE_STATE=0 ;;
    esac
    [ "$DBGOUT" = 1 ] && echo "toggle state: $TOGGLE_STATE"
    tick
}

# get signal USR1
trap toggleSwitch USR1

# input parsing
while [ "$#" -gt 0 ]; do
    case "$1" in
        debug)   DBGOUT=1  ;;
        oneshot) ONESHOT=1 ;;
        *) echo "${0}: error, invalid argument: ${1}" ;;
    esac
    shift
done

loadConfig

# do we run as a one shot?
if [ "$ONESHOT" = 1 ]; then
    tick
else
    count=0
    # firs color temp change
    tick
    while true; do
        # is the count of cycle iterations the same as the interval?
        if [ "$count" = "$INTERVAL" ]; then
            tick
            # reset the count to 0
            count=0
        fi
        # ingrement the count
        count=$(( count + 1 ))
        # the duty cycle of this daemon is 10 iterations per second
        # this is fast enough to feel responsive to signales, yet not hog
        # resources, mainly cpu
        sleep 0.1
    done
fi
